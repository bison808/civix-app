#!/usr/bin/env node

/**
 * CITZN End-to-End Regression Test Suite
 * Comprehensive automated testing for critical bug fixes and system stability
 * Generated by Agent 19: End-to-End Testing Agent
 * Date: August 23, 2025
 */

const fetch = require('node-fetch');
const assert = require('assert');

class CITZNTestSuite {
  constructor(baseUrl = 'http://localhost:3008') {
    this.baseUrl = baseUrl;
    this.testResults = [];
    this.passed = 0;
    this.failed = 0;
  }

  async runTest(testName, testFn) {
    console.log(`🧪 Running: ${testName}`);
    try {
      await testFn();
      this.testResults.push({ name: testName, status: 'PASS', error: null });
      this.passed++;
      console.log(`✅ ${testName} - PASSED`);
    } catch (error) {
      this.testResults.push({ name: testName, status: 'FAIL', error: error.message });
      this.failed++;
      console.log(`❌ ${testName} - FAILED: ${error.message}`);
    }
  }

  async makeRequest(endpoint, options = {}) {
    const url = `${this.baseUrl}${endpoint}`;
    const response = await fetch(url, {
      headers: { 'Content-Type': 'application/json' },
      ...options
    });
    return { response, data: await response.json().catch(() => null) };
  }

  // ZIP Code Validation Tests
  async testSacramentoZipCodes() {
    const testCases = [
      { zip: '95814', expectedCity: 'Sacramento' },
      { zip: '95815', expectedCity: 'Sacramento' },
      { zip: '95816', expectedCity: 'Sacramento' }
    ];

    for (const { zip, expectedCity } of testCases) {
      const { data } = await this.makeRequest('/api/auth/verify-zip', {
        method: 'POST',
        body: JSON.stringify({ zipCode: zip })
      });

      assert.strictEqual(data.valid, true, `ZIP ${zip} should be valid`);
      assert.strictEqual(data.city, expectedCity, `ZIP ${zip} should show city as ${expectedCity}`);
      assert.strictEqual(data.state, 'CA', `ZIP ${zip} should be in CA`);
      assert.strictEqual(data.county, 'Sacramento', `ZIP ${zip} should be in Sacramento County`);
    }
  }

  async testMajorCityZipCodes() {
    const testCases = [
      { zip: '90210', expectedCity: 'Beverly Hills', expectedState: 'CA' },
      { zip: '94102', expectedCity: 'San Francisco', expectedState: 'CA' },
      { zip: '90001', expectedCity: 'Los Angeles area', expectedState: 'CA' }
    ];

    for (const { zip, expectedCity, expectedState } of testCases) {
      const { data } = await this.makeRequest('/api/auth/verify-zip', {
        method: 'POST',
        body: JSON.stringify({ zipCode: zip })
      });

      assert.strictEqual(data.valid, true, `ZIP ${zip} should be valid`);
      assert.strictEqual(data.city, expectedCity, `ZIP ${zip} should show correct city`);
      assert.strictEqual(data.state, expectedState, `ZIP ${zip} should be in ${expectedState}`);
    }
  }

  async testInvalidZipCodeValidation() {
    const invalidZips = ['99999', '00000', '00001', '99998'];

    for (const zip of invalidZips) {
      const { data } = await this.makeRequest('/api/auth/verify-zip', {
        method: 'POST',
        body: JSON.stringify({ zipCode: zip })
      });

      assert.strictEqual(data.valid, false, `ZIP ${zip} should be invalid`);
      assert(data.error, `ZIP ${zip} should return an error message`);
    }
  }

  async testInvalidZipCodeFormat() {
    const malformedZips = ['abc12', '1234', '123456', '', null];

    for (const zip of malformedZips) {
      const { data } = await this.makeRequest('/api/auth/verify-zip', {
        method: 'POST',
        body: JSON.stringify({ zipCode: zip })
      });

      assert.strictEqual(data.valid, false, `Malformed ZIP ${zip} should be invalid`);
      assert(data.error && data.error.includes('format'), `ZIP ${zip} should return format error`);
    }
  }

  async testUnincorporatedAreaZipCodes() {
    // Test known unincorporated area ZIP codes
    const unincorporatedZips = ['90022', '91001', '94303'];

    for (const zip of unincorporatedZips) {
      const { data } = await this.makeRequest('/api/auth/verify-zip', {
        method: 'POST',
        body: JSON.stringify({ zipCode: zip })
      });

      assert.strictEqual(data.valid, true, `Unincorporated ZIP ${zip} should be valid`);
      assert.strictEqual(data.state, 'CA', `ZIP ${zip} should be in CA`);
      assert(data.city.includes('area') || data.city.includes('Los Angeles'), 
        `ZIP ${zip} should indicate area-level location`);
    }
  }

  // API Endpoint Tests
  async testBillsAPIAvailability() {
    const { response, data } = await this.makeRequest('/api/bills');
    
    assert.strictEqual(response.status, 200, 'Bills API should return 200 status');
    assert(Array.isArray(data), 'Bills API should return an array');
    assert(data.length > 0, 'Bills API should return some bills');
    
    // Test for H.R. 1 specifically (mentioned in bug tracker)
    const hr1 = data.find(bill => bill.billNumber === 'H.R. 1');
    assert(hr1, 'H.R. 1 should be present in bills data');
    assert.strictEqual(hr1.title, 'One Big Beautiful Bill Act', 'H.R. 1 should have correct title');
  }

  async testHomePageLoadability() {
    const url = `${this.baseUrl}/`;
    const response = await fetch(url);
    
    assert.strictEqual(response.status, 200, 'Home page should return 200 status');
    
    const html = await response.text();
    assert(html.includes('CITZN'), 'Home page should contain CITZN branding');
    assert(html.includes('ZIP code'), 'Home page should have ZIP code input');
    assert(html.includes('Directing Democracy'), 'Home page should have tagline');
  }

  async testRegistrationEndpoint() {
    const { response, data } = await this.makeRequest('/api/auth/register', {
      method: 'POST',
      body: JSON.stringify({
        zipCode: '95814',
        interests: ['bills', 'representatives']
      })
    });

    // Registration should either succeed or fail gracefully
    assert(response.status === 200 || response.status === 400, 
      'Registration endpoint should respond appropriately');
    
    if (response.status === 200) {
      assert(data.success !== undefined, 'Successful registration should indicate success status');
    }
  }

  // Performance Tests
  async testAPIResponseTimes() {
    const endpoints = [
      '/api/auth/verify-zip',
      '/api/bills'
    ];

    for (const endpoint of endpoints) {
      const startTime = Date.now();
      
      let requestOptions = {};
      if (endpoint.includes('verify-zip')) {
        requestOptions = {
          method: 'POST',
          body: JSON.stringify({ zipCode: '95814' })
        };
      }

      const { response } = await this.makeRequest(endpoint, requestOptions);
      const responseTime = Date.now() - startTime;

      assert(response.status === 200, `${endpoint} should be accessible`);
      assert(responseTime < 5000, `${endpoint} should respond within 5 seconds (took ${responseTime}ms)`);
      
      console.log(`⏱️  ${endpoint} response time: ${responseTime}ms`);
    }
  }

  // Data Quality Tests
  async testDataConsistency() {
    // Test that ZIP code verification returns consistent data
    const testZip = '95814';
    const requests = 3;
    const responses = [];

    for (let i = 0; i < requests; i++) {
      const { data } = await this.makeRequest('/api/auth/verify-zip', {
        method: 'POST',
        body: JSON.stringify({ zipCode: testZip })
      });
      responses.push(data);
    }

    // All responses should be identical
    const firstResponse = responses[0];
    for (let i = 1; i < responses.length; i++) {
      assert.deepStrictEqual(responses[i], firstResponse, 
        `ZIP verification should return consistent data (attempt ${i+1})`);
    }
  }

  // Edge Case Tests
  async testEdgeCases() {
    // Test ZIP codes near boundary ranges
    const edgeCaseZips = [
      { zip: '00501', shouldBeValid: false, reason: 'unknown location' }, // First valid ZIP range but no known location
      { zip: '00500', shouldBeValid: false, reason: 'range' }, // Just below range
      { zip: '99950', shouldBeValid: false, reason: 'unknown location' }, // Last valid ZIP range but no known location
      { zip: '99951', shouldBeValid: false, reason: 'range' } // Just above range
    ];

    for (const { zip, shouldBeValid, reason } of edgeCaseZips) {
      const { data } = await this.makeRequest('/api/auth/verify-zip', {
        method: 'POST',
        body: JSON.stringify({ zipCode: zip })
      });

      assert.strictEqual(data.valid, shouldBeValid, 
        `ZIP ${zip} validity should be ${shouldBeValid}`);
      
      if (reason === 'range') {
        assert(data.error && data.error.includes('range'), 
          `ZIP ${zip} should return range error`);
      } else if (reason === 'unknown location') {
        assert(data.error && data.error.includes('unknown'), 
          `ZIP ${zip} should return unknown location error`);
      }
    }
  }

  // Generate Test Report
  generateReport() {
    const timestamp = new Date().toISOString();
    const totalTests = this.passed + this.failed;
    const passRate = ((this.passed / totalTests) * 100).toFixed(2);

    const report = {
      testSuite: 'CITZN E2E Regression Test Suite',
      timestamp,
      summary: {
        totalTests,
        passed: this.passed,
        failed: this.failed,
        passRate: `${passRate}%`
      },
      testResults: this.testResults,
      recommendations: this.generateRecommendations()
    };

    return report;
  }

  generateRecommendations() {
    const recommendations = [];

    if (this.failed > 0) {
      recommendations.push('🔴 CRITICAL: Fix failing tests before deployment');
    }

    if (this.passed / (this.passed + this.failed) < 0.95) {
      recommendations.push('🟡 WARNING: Test pass rate below 95% - investigate issues');
    }

    if (this.testResults.some(t => t.name.includes('Performance') && t.status === 'FAIL')) {
      recommendations.push('🟡 Performance issues detected - optimize slow endpoints');
    }

    if (this.failed === 0) {
      recommendations.push('✅ All tests passing - system ready for production');
      recommendations.push('✅ Bug fixes verified successfully');
      recommendations.push('✅ Core functionality stable');
    }

    return recommendations;
  }

  async runAllTests() {
    console.log('\n🚀 CITZN E2E Regression Test Suite');
    console.log('=====================================\n');

    // Core ZIP Code Tests
    console.log('📍 ZIP Code Validation Tests');
    await this.runTest('Sacramento ZIP codes (95814, 95815, 95816)', () => this.testSacramentoZipCodes());
    await this.runTest('Major city ZIP codes (LA, SF)', () => this.testMajorCityZipCodes());
    await this.runTest('Invalid ZIP code rejection', () => this.testInvalidZipCodeValidation());
    await this.runTest('Malformed ZIP code format validation', () => this.testInvalidZipCodeFormat());
    await this.runTest('Unincorporated area ZIP codes', () => this.testUnincorporatedAreaZipCodes());

    // API Functionality Tests
    console.log('\n🔌 API Endpoint Tests');
    await this.runTest('Bills API availability and data', () => this.testBillsAPIAvailability());
    await this.runTest('Home page loadability', () => this.testHomePageLoadability());
    await this.runTest('Registration endpoint functionality', () => this.testRegistrationEndpoint());

    // Performance Tests
    console.log('\n⚡ Performance Tests');
    await this.runTest('API response times', () => this.testAPIResponseTimes());

    // Data Quality Tests
    console.log('\n📊 Data Quality Tests');
    await this.runTest('Data consistency across requests', () => this.testDataConsistency());

    // Edge Case Tests
    console.log('\n🎯 Edge Case Tests');
    await this.runTest('Boundary ZIP code validation', () => this.testEdgeCases());

    // Generate and display report
    console.log('\n📋 Test Results');
    console.log('================');
    
    const report = this.generateReport();
    
    console.log(`Total Tests: ${report.summary.totalTests}`);
    console.log(`Passed: ${report.summary.passed} ✅`);
    console.log(`Failed: ${report.summary.failed} ❌`);
    console.log(`Pass Rate: ${report.summary.passRate}`);
    
    console.log('\n💡 Recommendations:');
    report.recommendations.forEach(rec => console.log(`   ${rec}`));

    // Save detailed report
    const fs = require('fs');
    const reportPath = '/tmp/citzn-regression-test-report.json';
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
    console.log(`\n📄 Detailed report saved to: ${reportPath}`);

    return report;
  }
}

// CLI execution
if (require.main === module) {
  const baseUrl = process.argv[2] || 'http://localhost:3008';
  const testSuite = new CITZNTestSuite(baseUrl);
  
  testSuite.runAllTests()
    .then(report => {
      process.exit(report.summary.failed === 0 ? 0 : 1);
    })
    .catch(error => {
      console.error('🔥 Test suite failed to run:', error);
      process.exit(1);
    });
}

module.exports = CITZNTestSuite;