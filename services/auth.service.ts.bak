import { authAPI, apiClient } from './api/client';
import {
  User,
  LoginData,
  LoginResponse,
  RegistrationData,
  RegistrationResponse,
  ZipCodeVerification,
  PasswordResetRequest,
  PasswordResetConfirm,
} from '../types/auth.types';

class AuthService {
  async register(data: RegistrationData): Promise<RegistrationResponse> {
    const response = await authAPI.post('/api/auth/register', data);
    const result = await response.json() as RegistrationResponse;
    if (result.token) {
      apiClient.setAuthToken(result.token);
      this.saveUser(result.user);
    }
    return result;
  }

  async login(data: LoginData): Promise<LoginResponse> {
    const response = await authAPI.post('/api/auth/login', data);
    const result = await response.json() as LoginResponse;
    if (result.token) {
      apiClient.setAuthToken(result.token);
      this.saveUser(result.user);
    }
    return result;
  }

  async logout(): Promise<void> {
    try {
      await authAPI.post('/api/auth/logout');
    } finally {
      apiClient.clearAuthToken();
      this.clearUser();
    }
  }

  async verifyZipCode(zipCode: string): Promise<ZipCodeVerification> {
    const response = await authAPI.get(`/api/auth/verify-zip/${zipCode}`);
    return await response.json() as ZipCodeVerification;
  }

  async getCurrentUser(): Promise<User | null> {
    try {
      const response = await authAPI.get('/api/auth/me');
      const user = await response.json() as User;
      this.saveUser(user);
      return user;
    } catch (error) {
      return null;
    }
  }

  async updateProfile(data: Partial<User>): Promise<User> {
    const response = await authAPI.patch('/api/auth/profile', data);
    const updatedUser = await response.json() as User;
    this.saveUser(updatedUser);
    return updatedUser;
  }

  async requestPasswordReset(data: PasswordResetRequest): Promise<void> {
    await authAPI.post('/api/auth/password-reset/request', data);
  }

  async confirmPasswordReset(data: PasswordResetConfirm): Promise<void> {
    await authAPI.post('/api/auth/password-reset/confirm', data);
  }

  async verifyEmail(token: string): Promise<void> {
    await authAPI.post('/api/auth/verify-email', { token });
  }

  async resendVerificationEmail(): Promise<void> {
    await authAPI.post('/api/auth/resend-verification');
  }

  async changePassword(currentPassword: string, newPassword: string): Promise<void> {
    await authAPI.post('/api/auth/change-password', {
      currentPassword,
      newPassword,
    });
  }

  isAuthenticated(): boolean {
    if (typeof window === 'undefined') return false;
    const token = localStorage.getItem('auth_token');
    return !!token;
  }

  isAuthenticatedForMiddleware(): boolean {
    if (typeof window === 'undefined') return false;
    
    const token = localStorage.getItem('auth_token');
    const user = localStorage.getItem('user');
    
    if (!token || !user) return false;
    
    try {
      const userData = JSON.parse(user);
      return !!userData.id && !!userData.email;
    } catch {
      return false;
    }
  }

  getUser(): User | null {
    if (typeof window === 'undefined') return null;
    const userStr = localStorage.getItem('user');
    if (!userStr) return null;
    try {
      return JSON.parse(userStr);
    } catch {
      return null;
    }
  }

  private saveUser(user: User): void {
    if (typeof window !== 'undefined') {
      localStorage.setItem('user', JSON.stringify(user));
    }
  }

  private clearUser(): void {
    if (typeof window !== 'undefined') {
      localStorage.removeItem('user');
    }
  }
}

export const authService = new AuthService();